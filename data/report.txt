## How would you characterize the performance comparison of the FIFO and LRU page replacement policies?
FIFO and LRU perform very similarly. In most cases, LRU performs slightly better than FIFO. LRU can still perform
more poorly than FIFO for some page request sequences. At a Page Frame count of 4, LRU seemed to consistently do worse
than FIFO.

## How did the number of available page frames affect the number of page faults? Explain the reason for this trend.
As the number of page frames increased to the number of pages, so did the success rate. As there is more room
to store pages, it is more likely that a requested page will already be in one of the page frames.

## What affect (if any) would an infinite number of page frames have on the number of page faults? Explain.
An infinite number of page frames would result in the number of page faults being equal to the number of pages. As soon
as a page is loaded into a page frame, that page will always be available, and will not need to be filtered out via
a page replacement policy.

## Is it possible to determine the minimum number of page faults that will occur during the execution of a program? If
so, what vital piece of information is needed to make such a determination?
The minimum number of page faults is the number of unique pages in the page request sequence.

## Is it possible to create a page replacement policy that produces 0 page faults? Explain why or why not.
Without loading pages into page frames beforehand, somehow, no there is no way to create a policy that produces 0 page
faults. All page frames are empty at the beginning of a process, and so as soon as a page is requested, a page fault
is generated to load that page into the page frame.

## What is your overall view on the performance of page replacement policies?
These two policies have very similar performance. There may be other policies or improvements to these policies
that could lead to significant performance increases.